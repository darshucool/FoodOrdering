@model UserSearchModel
@using AlfasiWeb
@using AlfasiWeb.Helpers
@using AlfasiWeb.Models
@using AlfasiWeb.Properties
@using AlfasiWeb.Util
@using Dinota.Domain.User
@using Dinota.Security

@Scripts.Render("~/bundles/TableSorter")
@Scripts.Render("~/bundles/scrollbar")

@Html.GetDeleteDiv()
@Html.GetBootsrapDiv("ResetPasswordPopUp-Element", "ResetPassword", "Reset password")
@Html.GetBootsrapDiv("GroupsPopUp-Element", "Groups", "Groups")
@{
    string userTitle = null;
    TempData.Keep(ViewDataKeys.UserTypeEnum);
    var usertypeenum = (byte) TempData[ViewDataKeys.UserTypeEnum];

    switch (@usertypeenum)
    {
        case 1:
        userTitle = "User";
        break;
        case 2:
        userTitle = "Project Manager";
        break;
        case 3:
        userTitle = "Supplier";
        break;
        case 4:
        userTitle = "Fabricator";
        break;
        case 5:
        userTitle = "Transporter";
        break;
        case 6:
        userTitle = "Erector";
        break;
    }
}

<div id="group_table" class="login_bk">
    @Html.Message()
    <div class="content-bk">
        <div id="form_head">
            <h3>@userTitle</h3>
        </div>
        <br/>
        <div >
            @{

                var rolePermission = ViewData.ContainsKey(ViewDataKeys.Permission)
                                                    ? (RolePermission) ViewData[ViewDataKeys.Permission]
                                                    : new RolePermission(false);

                TempData[ViewDataKeys.DetailPermission] = rolePermission;
                
                var currentUser = (string) ViewData[ViewDataKeys.CurrentUser];

                var users = ((IEnumerable<UserBase>) ViewData[ViewDataKeys.List]).ToList();
                Html.Custom().Grid(users, "ManageUsers", true).Sort(Model.GetGridSortOptions())
                    .Columns(column =>
                                 {
                                     column.For(user => Ajax.ActionLink(user.UserName, "Details", "Users", new {id = user.Id}, new AjaxOptions {OnFailure = "serverError();", UpdateTargetId = "divUserBase"}, new { @class = "btn-link pull-left"})).Named("Username").Sortable(false).ShowFilter(true);
                                     column.For(user => user.Name).Named("Name").Sortable(false).ShowFilter(true);
                                     column.For(user => Html.FuzzyDate(user.LastActiveDate)).Named("Last Active Date").SortColumnName("LastActiveDate").Sortable(false);

                                     //if (usertypeenum == 1 || usertypeenum == 2)
                                     //{
                                     //    column.For(user => Ajax.BoostrapedPopUpActionLink("Groups", "Groups", "Logins", new {userId = user.Id}, new AjaxOptions {UpdateTargetId = "GroupsPopUp-Element", OnSuccess = "javascript:BoostrapView('Groups');"}, "Groups")).Visible(rolePermission.CanEdit).Attributes(a => new Dictionary<string, object> {{"class", "span g_links"}}).Sortable(false);
                                     //}
                                     //else
                                     //{
                                     //    column.For(user => "").Sortable(false);
                                     //}

                                     if (rolePermission.CanEdit && usertypeenum != 4)
                                    {
                                        column.For(user => Ajax.BoostrapedPopUpActionLink("Groups", "Groups", "Logins", new {userId = user.Id}, new AjaxOptions {UpdateTargetId = "GroupsPopUp-Element", OnSuccess = "javascript:BoostrapView('Groups');"}, "Groups")).Visible(rolePermission.CanEdit).Attributes(a => new Dictionary<string, object> {{"class", "span g_links"}}).Sortable(false);
                                        column.For(user => Ajax.BoostrapedPopUpActionLink("Reset password", "ResetPassword", "Users", new {id = user.Id}, new AjaxOptions {UpdateTargetId = "ResetPasswordPopUp-Element", OnSuccess = "javascript:BoostrapView('ResetPassword');"}, "Reset Password")).Visible(rolePermission.CanEdit).Attributes(a => new Dictionary<string, object> {{"class", "span g_links"}}).Sortable(false);
                                        column.For(user => Ajax.ActionLink("Edit", "Edit", "Users", new {id = user.Id}, new AjaxOptions {OnFailure = "serverError();", UpdateTargetId = "divUserBase"})).Visible(rolePermission.CanEdit).Attributes(a => new Dictionary<string, object> {{"class", "span g_links"}}).Sortable(false);
                                        column.For(user => Ajax.BoostrapedDeletePopUpActionLink(user)).Encode(false).CellCondition(u => !(u.UserName == currentUser || u.UserName == Resources.AliasAdminUser)).Visible(rolePermission.CanEdit).Attributes(a => new Dictionary<string, object> {{"class", "span g_links"}}).Sortable(false);
                                    }
                                    else if (rolePermission.CanEdit && usertypeenum == 4)
                                    {
                                       column.For(user => Ajax.BoostrapedPopUpActionLink("Groups", "Groups", "Logins", new {userId = user.Id}, new AjaxOptions {UpdateTargetId = "GroupsPopUp-Element", OnSuccess = "javascript:BoostrapView('Groups');"}, "Groups")).Visible(rolePermission.CanEdit).Attributes(a => new Dictionary<string, object> {{"class", "span g_links"}}).Sortable(false).Encode(false).CellCondition(u => !u.IsFabUser);
                                        column.For(user => Ajax.BoostrapedPopUpActionLink("Reset password", "ResetPassword", "Users", new { id = user.Id }, new AjaxOptions { UpdateTargetId = "ResetPasswordPopUp-Element", OnSuccess = "javascript:BoostrapView('ResetPassword');" }, "Reset Password")).Visible(rolePermission.CanEdit).Attributes(a => new Dictionary<string, object> { { "class", "span g_links" } }).Sortable(false).Encode(false).CellCondition(u => !u.IsFabUser);
                                        column.For(user => Ajax.ActionLink("Edit", "Edit", "Users", new { id = user.Id }, new AjaxOptions { OnFailure = "serverError();", UpdateTargetId = "divUserBase" })).Visible(rolePermission.CanEdit).Attributes(a => new Dictionary<string, object> { { "class", "span g_links" } }).Sortable(false).Encode(false).CellCondition(u => !u.IsFabUser);
                                        column.For(user => Ajax.BoostrapedDeletePopUpActionLink(user)).Encode(false).CellCondition(u => !(u.UserName == currentUser || u.UserName == Resources.AliasAdminUser)).Visible(rolePermission.CanEdit).Attributes(a => new Dictionary<string, object> { { "class", "span g_links" } }).Sortable(false).Encode(false).CellCondition(u => !u.IsFabUser);
                                    }
                                    else
                                    {
                                        column.For(user => "").Sortable(false);
                                        column.For(user => "").Sortable(false);
                                        column.For(user => "").Sortable(false);
                                        column.For(user => "").Sortable(false);
                                    }
                                 }).Render();

            }
        </div>
        <div class="link_bar">
            @if (@rolePermission.CanAdd)
            {
                @Ajax.ActionLink("New " + userTitle, "Create", "users", new AjaxOptions {OnFailure = "serverError();", UpdateTargetId = "divUserBase"}, new {@class = "btn-link pull-right"})
            }
        </div>
    </div>
</div>

<script src="@Url.Content("~/Scripts/custom/commonscript.js")" type="text/javascript"> </script>
<script type="text/javascript">

    var dTable = null;

    if ($.browser.msie && $.browser.version == 9) {
        //left it if we can come up with a fix
    } else {
        setTimeout(function() {
            $(".dataTables_scrollBody").mCustomScrollbar({
                    theme: "dark-thick",
                    advanced: {
                        updateOnBrowserResize: true,
                        updateOnContentResize: true
                    }
                });
        }, 50);
    }

    $(document).ready(function () {

        SetFilterColumnCount(2);

        dTable = $('#ManageUsers').dataTable({
            "aoColumns": [null, null, null, { "bSortable": false }, { "bSortable": false }, { "bSortable": false }, { "bSortable": false}],
            "bPaginate": false,
            "bLengthChange": false,
            "bFilter": false,
            "bSort": true,
            "bInfo": false,
            "sScrollY": "300px",
            "bAutoWidth": false,
            "bScrollCollapse": false,
            "bSortCellsTop": true,
            "bRetrieve": true
        });

        $(window).bind('resize', CustomResize);

    });

    var update_size = function () {

        dTable.css({ width: dTable.parent().width() });
        dTable.fnAdjustColumnSizing();

    };

    function CustomResize() {

        $(window).unbind('resize');
        
        clearTimeout(window.refresh_size);
        window.refresh_size = setTimeout(function () {
            update_size();
        }, 50);
        
        $(window).bind('resize', CustomResize);

    }

</script>








